{% include "common/header.j2" %}

/**
 * @defgroup    drivers_{{ driver.name }} {{ driver.displayed_name }}
 * @ingroup     drivers_{{ driver.ingroup }}
 * @brief       {{ driver.brief }}
 *
 * @{
 *
 * @file
 *
 * @author      {{ global.author_name }} <{{ global.author_email }}>
 */

#ifndef {{ driver.name|upper }}_H
#define {{ driver.name|upper }}_H

{% if driver.ingroup == "netdev" %}
#include "net/netdev.h"
{% endif %}
/* Add header includes here */

#ifdef __cplusplus
extern "C" {
#endif

/* Declare the API of the driver */

/**
 * @brief   Device initialization parameters
 */
typedef struct {
    /* add initialization params here */
} {{ driver.name }}_params_t;

/**
 * @brief   Device descriptor for the driver
 */
typedef struct {
{% if driver.ingroup == "netdev" %}
    netdev_t netdev;                        /**< Netdev parent struct */
    /** Device initialization parameters */
    {{ driver.name }}_params_t *params;
{% else %}
    /** Device initialization parameters */
    {{ driver.name }}_params_t params;
{% endif %}
} {{ driver.name }}_t;

{% if driver.ingroup == "netdev" %}
/**
 * @brief   Setup the radio device
 *
 * @param[in] dev                       Device descriptor
 * @param[in] params                    Parameters for device initialization
 * @param[in] index                     Index of @p params in a global parameter struct array.
 *                                      If initialized manually, pass a unique identifier instead.
 */
void {{ driver.name }}_setup({{ driver.name }}_t *dev, const {{ driver.name }}_params_t *params, uint8_t index);

/**
 * @brief   Initialize the given device
 *
 * @param[inout] dev                    Device descriptor of the driver
 *
 * @return                  0 on success
 */
int {{ driver.name }}_init({{ driver.name }}_t *dev);
{% else %}
/**
 * @brief   Initialize the given device
 *
 * @param[inout] dev        Device descriptor of the driver
 * @param[in]    params     Initialization parameters
 *
 * @return                  0 on success
 */
int {{ driver.name }}_init({{ driver.name }}_t *dev, const {{ driver.name }}_params_t *params);
{% endif %}

#ifdef __cplusplus
}
#endif

#endif /* {{ driver.name|upper }}_H */
/** @} */
